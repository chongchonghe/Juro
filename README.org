#+HTML_HEAD: <style type="text/css"> body { color: black; max-width: 1200px; } img {max-width: 400px; } </style>
#+options: toc:nil num:nil

* Juro: a hydro code written in pure Julia

This is a modular hydrodynamic code written in pure Julia. 

** About

- Riemann solver
	  - 1D and 2D HLL 1st order
	  - 1D and 2D HLL 2nd order
- Integrator
	  - Euler
	  - RK2
	  - RK3
- Initial conditions
	  - 2D Kelvin-Helmholtz instability
	  - 1D and 2D sod shock tube
- Boundary condition
	  - Transimissive
	  - Periodic

TODO: add descriptions to the Riemann solvers, interpolation method, etc.

** Usage

First, clone this repository to a directory

#+BEGIN_SRC sh
git clone https://github.com/chongchonghe/Juro.git
#+END_SRC

Then, you can use this module either with command line interface or Julia REPL.

*** Run with the command line interface

Run ~julia -h~ for a detailed instruction. Here are some simple examples:

#+BEGIN_SRC sh
julia Juro.jl/src/run.jl sod 128 0.1 tmp
julia Juro.jl/src/run.jl KH 512 1 examples/KH_512
#+END_SRC

Once the run is done, you can restart from the last snapshot by adding ~--restart 10~ and keeping every other parameters unchanged except ~tend~. A snapshot to resume the simulation from is store in =output_dir/data=. 

Optionally, you may add a ~-i~ option to the ~julia~ command to make the run more flexible by bringing two extra features:
1. You may interrupt the run at any time by pressing ~Ctrl-c~ and the program will save all the necessary data needed to resume the run before quitting.
2. After the program is finished, you will be returned to the Julia REPL where the program was running, and you will be able to start another run immediately by using ~hydro(...)~. See the next section =Run with REPL= for details.

*** Run with REPL

You can use Juro.jl via Julia REPL (read-eval-print loop).

#+begin_src 
julia> include("Juro.jl/src/Juro.jl")

julia> using .Juro

julia> hydro(1, 512, 0.1, "tmp", init_sod)

julia> hydro(1, 512, 0.2, "tmp", init_sod, restart=10)
#+end_src


** Examples

*** 2D, KH		

- Kelvin-Helmholtz instability test. HLL 2nd order + RK3, nx = 512.
	  - ~julia Juro.jl/src/run.jl KH 512 1.0 examples/test-2d-KH --dtout 0.01~
	  - =julia>= ~hydro(2, 512, 1.0, "examples/test-2d-KH", init_KH, dtout=0.01)~
	  - TODO: add this figure from st
	  # - [[file:examples/test-2d-KH-512/hydro-00300.png]]
	  - A snapshot showing the density at t=0.63. (Click on the picture or here to download a video that goes from t=0 to t=2: [[file:examples/test-2d-KH-512/KH-3M.mp4][3M]] [[file:examples/test-2d-KH-512/KH-61M.mp4][61M]]):

		#+attr_html: :width 600pt
           [[file:examples/test-2d-KH-512/KH-3M.mp4][file:examples/test-2d-KH-512/hydro-00190.png]]

*** 1D, Sod

- 1D Sod shock tube problem. HLL 2nd order + RK3, nx = 128.
	  - ~julia Juro.jl/src/run.jl sod 128 0.1 examples/test-1d-sod~, or
	  - =julia>= ~hydro(1, 128, 0.1, "examples/test-1d-sod", init_sod)~
	  - [[file:examples/test-1d-sod-128/hydro_00010.png]]

- 1D Sod shock tube problem. Lax + Euler, nx = 128.
	  - ~julia Juro.jl/src/run.jl sod 128 0.1 examples/test-1d-sod-lax-euler lax euler~, or
	  - =julia>= ~hydro(1, 128, 0.1, "examples/test-1d-sod-lax-euler", init_sod, solver=lax, integrator=euler)~
	  - [[file:examples/test-1d-sod-lax-euler-128/hydro_00010.png]]

*** 2D, Sod

- 2D Sod shock tube problem. HLL 2nd order + RK3, nx = 128.
	  - ~julia Juro.jl/src/run.jl sod2d 128 0.1 examples/test-2d-sod2d --dtout 0.01 --plot curve~
	  - =julia>= ~hydro(2, 128, 0.1, "examples/test-2d-sod2d", init_sod, plotit=plot_curve, dtout=0.01)~
	  - [[file:examples/test-2d-sod2d-128/hydro_00010.png]]

