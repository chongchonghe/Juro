#+HTML_HEAD: <style type="text/css"> body { color: black; max-width: 1200px; } img {max-width: 400px; } </style>
#+options: toc:nil num:nil

* Juro: a hydro code written in pure Julia

** Usage

First, clone this repository to a directory

#+BEGIN_SRC sh
git clone https://github.com/chongchonghe/Juro.git
#+END_SRC

Then, you can use this module either with command line interface or Julia REPL.

*** Run with the command line interface

#+BEGIN_SRC sh
julia Juro.jl/src/run.jl sod 128 0.1 tmp
julia Juro.jl/src/run.jl KH 512 1 examples/KH_512
#+END_SRC

Optionally adding a ~-i~ option to the ~julia~ command makes the run more flexible as it adds two extra features:
1. You may interrupt the run at any time by pressing ~Ctrl-c~ and the program will save all the necessary data needed to resume the run before quitting.
2. After the program is finished, you will be returned to the Julia REPL where the program was running, and you will be able to start another run immediately by using ~hydro(...)~. See the next section =Run with REPL= for details.

*** Run with REPL

You can use Juro.jl via Julia REPL (read-eval-print loop).

#+begin_src 
julia> include("Juro.jl/src/Juro.jl")

julia> using .Juro

julia> hydro(1, 512, 0.1, "tmp", init_sod)

julia> hydro(1, 512, 0.2, "tmp", init_sod, restart=10)
#+end_src


** Examples

*** 2D, KH		

- HLL 2nd order + RK3, nx = 512.
	  - ~julia Juro.jl/src/run.jl KH 512 1.0 examples/test-2d-KH --dtout 0.01~
	  - =julia>= ~hydro(2, 512, 1.0, "examples/test-2d-KH", init_KH, dtout=0.01)~
	  - TODO: add this figure from st
	  # - [[file:examples/test-2d-KH-512/hydro-00300.png]]
	  - Snapshot (click to download a video)

[[[[file:examples/test-2d-KH-512\][test-2d-KH-512.mp4\][file:examples/test-2d-KH-512/hydro-00190.png]\]]]

*** 1D, Sod

- HLL 2nd order + RK3, nx = 512, error at t=0.10 is 0.00047.
	  - ~julia Juro.jl/src/run.jl sod 128 0.1 examples/test-1d-sod~, or
	  - =julia>= ~hydro(1, 128, 0.1, "examples/test-1d-sod", init_sod)~
	  - [[file:examples/test-1d-sod-128/hydro_00010.png]]

- Lax + Euler, nx = 128, error at t=0.095 is 0.0054.
	  - ~julia Juro.jl/src/run.jl sod 128 0.1 examples/test-1d-sod-lax-euler lax euler~, or
	  - =julia>= ~hydro(1, 128, 0.1, "examples/test-1d-sod-lax-euler", init_sod, solver=lax, integrator=euler)~
	  - [[file:examples/test-1d-sod-lax-euler-128/hydro_00010.png]]

*** 2D, Sod

- HLL 2nd order + RK3, nx = 128, error at t = 0.093 is 0.0017
	  - ~julia Juro.jl/src/run.jl sod2d 128 0.1 examples/test-2d-sod2d --dtout 0.01 --plot curve~
	  - =julia>= ~hydro(2, 128, 0.1, "examples/test-2d-sod2d", init_sod, plotit=plot_curve, dtout=0.01)~
	  - [[file:examples/test-2d-sod2d-128/hydro_00010.png]]

